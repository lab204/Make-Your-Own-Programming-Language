/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"
#define initialize_lexer calc_initialize_lexer
extern int yyparse(void);
extern int yylex(void);
int yy_mylinenumber;
extern int initialize_lexer(FILE * inp);
void yyerror(const char *str)
{
  extern char *calctext;
  fprintf(stderr,"error: line %d: %s at %s\n",
    yy_mylinenumber + 1, str, calctext);
}

Exp YY_RESULT_Exp_ = 0;
Exp pExp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Exp exp_;

}

%token _ERROR_
%token _SYMB_0    /*   +   */
%token _SYMB_1    /*   -   */
%token _SYMB_2    /*   *   */
%token _SYMB_3    /*   /   */
%token _SYMB_4    /*   (   */
%token _SYMB_5    /*   )   */

%type <exp_> Exp
%type <exp_> Exp1
%type <exp_> Exp2

%token<int_> _INTEGER_

%start Exp
%%
Exp : Exp _SYMB_0 Exp1 { $$ = make_EAdd($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp _SYMB_1 Exp1 { $$ = make_ESub($1, $3); YY_RESULT_Exp_= $$; }
  | Exp1 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp1 : Exp1 _SYMB_2 Exp2 { $$ = make_EMul($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp1 _SYMB_3 Exp2 { $$ = make_EDiv($1, $3); YY_RESULT_Exp_= $$; }
  | Exp2 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp2 : _INTEGER_ { $$ = make_EInt($1); YY_RESULT_Exp_= $$; } 
  | _SYMB_4 Exp _SYMB_5 { $$ = $2; YY_RESULT_Exp_= $$; }
;

